[["index.html", "Coordinate Reference Systems Overview 0.1 Description 0.2 Learning Objectives 0.3 Prerequisites", " Coordinate Reference Systems Dr. Michele Tobias 2021-04-23 Overview 0.1 Description In this workshop, participants will learn about projected coordinate reference systems (CRS, commonly called projections) and how to apply them in R to spatial data. We will discuss the components of a CRS, how to apply them, how to translate your data into a different CRS, and how to choose a CRS. 0.2 Learning Objectives By the end of this workshop, participants will have a better understanding of what a projected coordinate system is, why you would choose one over another, and how to apply them correctly to geospatial data in R. 0.3 Prerequisites Participants should have a basic understanding of R (for example, be able to create variables and load common data formats like a CSV) and a basic understanding of GIS data formats (e.g., raster and vector data). Participants should also install R and RStudio. "],["concepts.html", "1 Concepts 1.1 Introduction 1.2 Parts of the Coordinate Reference System (CRS) 1.3 Notation for Coordinate Reference Systems 1.4 Defining a Projection vs. Reprojecting (Transforming)", " 1 Concepts 1.1 Introduction The earth is a geoid, a generally spherical shape with some bumps or other distortions from a true shere, but we can think of it as being spherical. Maps, however, are usually flat, and if they are not flat, they are not the same shape as the earth. To make a flat map from measurements made on a round object, we need to transforms the measurements. After we transform the data, it exists in a coordinate reference system. 1.2 Parts of the Coordinate Reference System (CRS) CRS = Datum + Projection + Additional Parameters A common analogy employed to teach projections is the orange peel analogy. If you imagine that the earth is an orange, how you peel it and then flatten the peel is similar to how projections get made. We will also use it here. 1.2.1 Datum A Datum is a model of the shape of the earth. It has angular units (i.e. degrees) and defines the starting point (i.e. where is (0,0)?) so the angles reference a meaningful spot on the earth. A commonly used global datum is WGS84. Datums can also be local, fit to a particular area of the globe, but ill-fitting outside the area of intended use. NAD83 is an example of a local datum that is fit specifically to North America. When datums are used by themselves its called a Geographic Coordinate System. Orange Peel Analogy: a datum is your choice of fruit to use in the orange peel analogy. Is the earth an orange, a lemon, a lime, a grapefruit? Citrus fruit on display at the market Comments from the pros: Datums matter! California Albers with NAD27 is NOT the same as California Albers with NAD83. See all of the advice here 1.2.2 Projection A Projection is a mathematical transformation of the angular measurements on a round earth to a flat surface (i.e. paper or a computer screen). The units associated with a given projection are usually linear (feet, meters, etc.). Many people use the term projection when they actually mean coordinate reference system. (With good reason, right? Coordinate References System is long and might make you sound pretentious.) One example is the title of this workshop but you wouldnt know what it was about if I said it was a workshop on Coordinate Reference Systems in R, would you? Orange Peel Analogy: a projection is how you peel your orange and then flatten the peel. An orange peeled like a map projection Image source: http://blogs.lincoln.ac.nz/gis/2017/03/29/where-on-earth-are-we/ 1.2.3 Additional Parameters Additional parameters are often necessary to create the full coordinate reference system. For example, one common additional parameter is a definition of the center of the map. The number of required additional parameters depends on what is needed by each specific projection. Orange Peel Analogy: an additional parameter could include a definition of the location of the stem of the fruit. 1.2.4 Which CRS/projection should I use? To decide if a projection is right for your data, answer these questions: What is the area of minimal distortion? What aspect of the data does it preserve? Coordinate reference systems can preserve aspects of the map such as shape, area, distance, and direction. Any coordinate reference system cannot preserve more than two of these and often they will only preserve one. University of Colorados Map Projections and the Department of Geo-Information Processing has a good discussion of these aspects of projections. Online tools like Projection Wizard can also help you discover projections that might be a good fit for your data. Comments from the pros: Take the time to figure identify a projection that is suited for your project. You dont have to stick to the ones that are popular. 1.3 Notation for Coordinate Reference Systems You have two options for identifying a CRS in most R commands. The documentation for a command that requires projection information will tell you which is required. Often you can choose between the two options. 1.3.1 EPSG Code A note on linguistics: EPSG stands for European Petroleum Survey Group but everyone just says EPSG. An EPSG Code is an ID that has been assigned to most common projections to make reference to a particular projection easy. An EPSG Code is also called an SRID (Spatial Reference Identifier). Technically, EPSG is the authority that assigns SRIDs, but you will hear these terms used interchangeably. The main advantages to using this method of specifying a projection are that it is standardized and ensures you have the same parameters every time. The disadvantage is that if you need to know the parameters used by the projection or its name, you have to look them up, but thats fairly easy to to at spatialreference.org. Also, you cant customize the parameters if you use an EPSG code. For example: EPSG:27561 1.3.2 PROJ String PROJ is an open source library for defining and converting between coordinate reference systems. It defines a standard way to write projection parameters. For example: +proj=lcc +lat_1=49.5 +lat_0=49.5 +lon_0=0 +k_0=0.999877341 +x_0=6 +y_0=2 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs Two important advantages to using this option are (1) the parameters are human-readable and immediately transparent and (2) the strings are easily customized. The main disadvantage to this option is that its easy to make a mistake when you reproduce the string, accidentally changing parameters. A note on linguistics: PROJ is commonly pronounced prodge (PROJ rhymes with dodge); PROJ is short for projection. Sometimes, youll hear or see PROJ4. The numeral refers to the version of the library. Version 4 was in use for a long time so even though theres newer versions, you may still see the concept referred to in this way. 1.4 Defining a Projection vs. Reprojecting (Transforming) The #1 biggest mistake I see in any GIS (ArcMap, QGIS, R, GRASS, Python, etc.) is defining a projection for a dataset when the person should have re-projected the data. It is very common that youll need to tell your GIS what the projection/CRS of your data should be. In these cases, the GIS needs to know what the projection/CRS currently is, not what you would like it to be. If you need to change a projection, you need to go through a different process, often called Re-project or Transform. Define a Projection/CRS to indicate what projection or coordinate reference sytem your data has. Reproject or Transform a Projection/CRS when you need to change the coordinate reference system. "],["tutorial-with-r.html", "2 Tutorial with R 2.1 Getting Started 2.2 Vector Data 2.3 Raster Data 2.4 Conclusion 2.5 Resources Used to Compile this Tutorial:", " 2 Tutorial with R Finally, now were going to work in R to get some hands-on practice with the concepts we just discussed. Well be working with sp objects today, but you should also know that there are sf objects as well. Roger Bivands review of spatial data for R is helpful for understading the options for working with spatial data. 2.1 Getting Started 2.1.1 Download the data The data for this workshop is available in the data folder in this repository, or you can download a .zip file from Box. 2.1.2 Start R Pick the R flavor of your choice - regular R, R Studio, etc. - and start it up. You can either add the commands well be using to a script file to run, or you can just run the lines individually in your console to see how they work. Its up to you. 2.1.3 Libraries Lets load the libraries well need. TIP: I add to this section as I write my code and need new libraries. Keep them in one place for easy reference. #install.packages(&quot;sf&quot;) #install.packages(&quot;terra&quot;) library(&quot;sf&quot;) library(&quot;terra&quot;) 2.1.4 Set your working directory to the folder where you saved your data TIP: Windows users, use \\ instead of or switch the direction of the slashes to / it has to do with escape characters. setwd(&quot;C:/WorkshopData&quot;) Replace C:/Workshops with the path to the folder in which you saved your data. This workshop assumes your workshop materials are in a folder called workshopData and the data is in a folder called data. 2.2 Vector Data 2.2.1 Read the data into our R session Because points by itself is a command and we dont want confusion, Ive added ws. (WS for watershed) to the front of my variable names. Most of the vector data formats can be read into r with the st_read function. To see the help files for this function, run ?st_read in your console. ws.points&lt;-st_read(&quot;data/WBDHU8_Points_SF.geojson&quot;) ## Reading layer `WBDHU8_Points_SF&#39; from data source `C:\\Users\\mmtobias\\Documents\\GitHub\\datalab\\workshop_coordinate_reference_systems\\data\\WBDHU8_Points_SF.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 6 features and 15 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -250560.3 ymin: -81326.09 xmax: -162308 ymax: 21467.35 ## Projected CRS: NAD83 / California Albers ws.polygons&lt;-st_read(&quot;data/WBDHU8_SF.geojson&quot;) ## Reading layer `WBDHU8_SF&#39; from data source `C:\\Users\\mmtobias\\Documents\\GitHub\\datalab\\workshop_coordinate_reference_systems\\data\\WBDHU8_SF.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 6 features and 10 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -278890 ymin: -122244.5 xmax: -122332.5 ymax: 75400.89 ## Projected CRS: NAD83 / California Albers ws.streams&lt;-st_read(&quot;data/flowlines.shp&quot;) ## Reading layer `flowlines&#39; from data source `C:\\Users\\mmtobias\\Documents\\GitHub\\datalab\\workshop_coordinate_reference_systems\\data\\flowlines.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 4857 features and 11 fields ## Geometry type: LINESTRING ## Dimension: XY ## Bounding box: xmin: -265095.9 ymin: -116267.6 xmax: -124022.6 ymax: 72531.26 ## CRS: NA Lets look at the contents of one of the files: ws.polygons ## Simple feature collection with 6 features and 10 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -278890 ymin: -122244.5 xmax: -122332.5 ymax: 75400.89 ## Projected CRS: NAD83 / California Albers ## TNMID LOADDATE AREAACRES AREASQKM STATES ## 1 {7A24A43D-27F0-4B35-A273-AF361042B2A8} 2012-06-11 489068.6 1979.19 CA ## 2 {F0F29A9E-E9D6-4F24-9D1A-CB8C7E22141E} 2012-06-11 853256.6 3453.01 CA ## 3 {7E0042D2-0B68-40B4-83FA-2850D989E91A} 2012-06-11 461004.8 1865.62 CA ## 4 {BE7EC116-0BE6-419E-8165-84B063FE8468} 2012-06-11 417511.7 1689.61 CA ## 5 {E67739F5-92F6-49B0-A017-F4A0372DD4F9} 2012-06-11 784983.8 3176.72 CA ## 6 {9B6A9642-9FE9-4F0B-BB30-90E918E63551} 2012-06-11 431362.9 1745.67 CA ## HUC8 NAME SHAPE_LENG SHAPE_AREA Rank_Acres ## 1 18050005 Tomales-Drake Bays 3.177305 0.2031323 4 ## 2 18050004 San Francisco Bay 4.019037 0.3522663 6 ## 3 18050003 Coyote 3.232746 0.1895257 3 ## 4 18050001 Suisun Bay 2.795490 0.1735314 1 ## 5 18050002 San Pablo Bay 3.985180 0.3266645 5 ## 6 18050006 San Francisco Coastal South 2.743098 0.1774121 2 ## geometry ## 1 MULTIPOLYGON (((-252626.2 4... ## 2 MULTIPOLYGON (((-187360.2 -... ## 3 MULTIPOLYGON (((-164610.2 -... ## 4 MULTIPOLYGON (((-188614.2 4... ## 5 MULTIPOLYGON (((-227456.2 7... ## 6 MULTIPOLYGON (((-220773.4 -... Note that the output not only shows the data but gives you some metadata as well, such as the geometry type, bounding box (bbox), and the projected CRS, which is NAD83 / California Albers. 2.2.2 Indentifying the Assigned CRS To see just the coordinate reference system, we can use the crs() command. Lets check the CRS for each of our files: st_crs(ws.points) ## Coordinate Reference System: ## User input: NAD83 / California Albers ## wkt: ## PROJCRS[&quot;NAD83 / California Albers&quot;, ## BASEGEOGCRS[&quot;NAD83&quot;, ## DATUM[&quot;North American Datum 1983&quot;, ## ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4269]], ## CONVERSION[&quot;California Albers&quot;, ## METHOD[&quot;Albers Equal Area&quot;, ## ID[&quot;EPSG&quot;,9822]], ## PARAMETER[&quot;Latitude of false origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8821]], ## PARAMETER[&quot;Longitude of false origin&quot;,-120, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8822]], ## PARAMETER[&quot;Latitude of 1st standard parallel&quot;,34, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8823]], ## PARAMETER[&quot;Latitude of 2nd standard parallel&quot;,40.5, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8824]], ## PARAMETER[&quot;Easting at false origin&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8826]], ## PARAMETER[&quot;Northing at false origin&quot;,-4000000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8827]]], ## CS[Cartesian,2], ## AXIS[&quot;easting (X)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;northing (Y)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;State-wide spatial data management.&quot;], ## AREA[&quot;United States (USA) - California.&quot;], ## BBOX[32.53,-124.45,42.01,-114.12]], ## ID[&quot;EPSG&quot;,3310]] st_crs(ws.polygons) ## Coordinate Reference System: ## User input: NAD83 / California Albers ## wkt: ## PROJCRS[&quot;NAD83 / California Albers&quot;, ## BASEGEOGCRS[&quot;NAD83&quot;, ## DATUM[&quot;North American Datum 1983&quot;, ## ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4269]], ## CONVERSION[&quot;California Albers&quot;, ## METHOD[&quot;Albers Equal Area&quot;, ## ID[&quot;EPSG&quot;,9822]], ## PARAMETER[&quot;Latitude of false origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8821]], ## PARAMETER[&quot;Longitude of false origin&quot;,-120, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8822]], ## PARAMETER[&quot;Latitude of 1st standard parallel&quot;,34, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8823]], ## PARAMETER[&quot;Latitude of 2nd standard parallel&quot;,40.5, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8824]], ## PARAMETER[&quot;Easting at false origin&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8826]], ## PARAMETER[&quot;Northing at false origin&quot;,-4000000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8827]]], ## CS[Cartesian,2], ## AXIS[&quot;easting (X)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;northing (Y)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;State-wide spatial data management.&quot;], ## AREA[&quot;United States (USA) - California.&quot;], ## BBOX[32.53,-124.45,42.01,-114.12]], ## ID[&quot;EPSG&quot;,3310]] st_crs(ws.streams) ## Coordinate Reference System: NA It looks like the streams dataset does not have its CRS defined. 2.2.3 Defining a CRS Lets be clear that the streams data has a CRS, but R doesnt know what it should be. (Someone may have forgotten to include the .prj file in this shapefile.) You dont get to decide what you want it to be, but rather figure out what it IS and tell R which coordinate system to use. How do you know which CRS the data has if its not properly defined? Typically, you first ask the person who sent it. If that fails, you can search for another version of the data online to get a file with the correct projection information. Finally, outright guessing can work, but isnt recommended. We know that the CRS for this data should be EPSG 3309 (because thats what the instructor saved it as before she deleted the .prj file shapefiles are not a great exchange format, FYI). Set the CRS: ws.streams.3309&lt;-st_set_crs(ws.streams, value=3309) EPSG 3309 = California Albers, NAD 27 Lets imagine we loaded up our data and find that it shows up on a map in the wrong location. What happened? Someone defined the CRS incorrectly. How do you fix it? First you figure out what the CRS should be, then you run one of the lines above with the correct CRS definition to fix the file. 2.2.4 Tranforming / Reprojecting Vector Data We need to get all our data into the same projection so it will plot together on one map before we can do any kind of spatial process on the data. # tranform/reproject vector data ws.streams.3310&lt;-st_transform(ws.streams.3309, crs=3310) # another option: match the CRS of the polygons data ws.streams.3310&lt;-st_transform(ws.streams.3309, crs=st_crs(ws.polygons)) Lets check the CRS for each of our files again: st_crs(ws.points) ## Coordinate Reference System: ## User input: NAD83 / California Albers ## wkt: ## PROJCRS[&quot;NAD83 / California Albers&quot;, ## BASEGEOGCRS[&quot;NAD83&quot;, ## DATUM[&quot;North American Datum 1983&quot;, ## ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4269]], ## CONVERSION[&quot;California Albers&quot;, ## METHOD[&quot;Albers Equal Area&quot;, ## ID[&quot;EPSG&quot;,9822]], ## PARAMETER[&quot;Latitude of false origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8821]], ## PARAMETER[&quot;Longitude of false origin&quot;,-120, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8822]], ## PARAMETER[&quot;Latitude of 1st standard parallel&quot;,34, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8823]], ## PARAMETER[&quot;Latitude of 2nd standard parallel&quot;,40.5, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8824]], ## PARAMETER[&quot;Easting at false origin&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8826]], ## PARAMETER[&quot;Northing at false origin&quot;,-4000000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8827]]], ## CS[Cartesian,2], ## AXIS[&quot;easting (X)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;northing (Y)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;State-wide spatial data management.&quot;], ## AREA[&quot;United States (USA) - California.&quot;], ## BBOX[32.53,-124.45,42.01,-114.12]], ## ID[&quot;EPSG&quot;,3310]] st_crs(ws.polygons) ## Coordinate Reference System: ## User input: NAD83 / California Albers ## wkt: ## PROJCRS[&quot;NAD83 / California Albers&quot;, ## BASEGEOGCRS[&quot;NAD83&quot;, ## DATUM[&quot;North American Datum 1983&quot;, ## ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4269]], ## CONVERSION[&quot;California Albers&quot;, ## METHOD[&quot;Albers Equal Area&quot;, ## ID[&quot;EPSG&quot;,9822]], ## PARAMETER[&quot;Latitude of false origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8821]], ## PARAMETER[&quot;Longitude of false origin&quot;,-120, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8822]], ## PARAMETER[&quot;Latitude of 1st standard parallel&quot;,34, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8823]], ## PARAMETER[&quot;Latitude of 2nd standard parallel&quot;,40.5, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8824]], ## PARAMETER[&quot;Easting at false origin&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8826]], ## PARAMETER[&quot;Northing at false origin&quot;,-4000000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8827]]], ## CS[Cartesian,2], ## AXIS[&quot;easting (X)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;northing (Y)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;State-wide spatial data management.&quot;], ## AREA[&quot;United States (USA) - California.&quot;], ## BBOX[32.53,-124.45,42.01,-114.12]], ## ID[&quot;EPSG&quot;,3310]] st_crs(ws.streams) ## Coordinate Reference System: NA Now they all should match. 2.2.5 Plotting the Data Lets make a map now that all our data is in the same projection. What if we had tried to do this earlier before we fixed out projection definitions and transformed the files into the same projections? Load up the CA Counties layer to use as reference in a map: ca.counties&lt;-st_read(&quot;data/CA_Counties.geojson&quot;) ## Reading layer `CA_Counties&#39; from data source `C:\\Users\\mmtobias\\Documents\\GitHub\\datalab\\workshop_coordinate_reference_systems\\data\\CA_Counties.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 179 features and 12 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -374443.2 ymin: -604504.7 xmax: 540082.8 ymax: 450029.9 ## Projected CRS: NAD83 / California Albers Lets plot all the data together: plot( ca.counties$geometry, col=&quot;#FFFDEA&quot;, border=&quot;gray&quot;, xlim=st_bbox(ws.polygons)[1:2], ylim=st_bbox(ws.polygons)[3:4], bg=&quot;#dff9fd&quot;, main = &quot;Perennial Streams&quot;, sub = &quot;in the San Francisco Bay Watersheds&quot; ) plot(ws.streams$geometry, col=&quot;#3182bd&quot;, lwd=1.75, add=TRUE) plot(ws.points$geometry, col=&quot;black&quot;, pch=20, cex=3, add=TRUE) plot(ws.polygons$geometry, lwd=2, border=&quot;grey35&quot;, add=TRUE) Some explanation of the code above for plotting the spatial data: * xlim/ylim sets the extent. Here I used the numbers from the bounding box of the polygon dataset, but you could put in numbers - remember that this is projected data so lat/long wont work * add=TRUE makes the 2nd, 3rd, 4th, etc. datasets plot on the same map as the first dataset you plot - order matters * col sets the fill color for the geometry * border sets the outline color (or stroke for users of vector graphics programs) * bg sets the background color for the plot * colors can be specified with words like gray or html hex codes like #dff9fd 2.3 Raster Data Weve just looked at how to work with the CRS of vector data. Now lets look at raster data. First, we need to install the package that works with raster data. Today well use terra but there are other packages like raster that also work in similar ways. 2.3.1 Load Data Now well load our data. This is a digital elevation model (DEM) of the City of San Francisco. dem&lt;-rast(x=&quot;data/DEM_SF.tif&quot;) 2.3.2 Indentifying the Assigned CRS What is the CRS of this dataset? Note that the command to read the CRS in the terra package is different from sf. crs(dem) ## [1] &quot;GEOGCRS[\\&quot;NAD83\\&quot;,\\n DATUM[\\&quot;North American Datum 1983\\&quot;,\\n ELLIPSOID[\\&quot;GRS 1980\\&quot;,6378137,298.257222101004,\\n LENGTHUNIT[\\&quot;metre\\&quot;,1]]],\\n PRIMEM[\\&quot;Greenwich\\&quot;,0,\\n ANGLEUNIT[\\&quot;degree\\&quot;,0.0174532925199433]],\\n CS[ellipsoidal,2],\\n AXIS[\\&quot;geodetic latitude (Lat)\\&quot;,north,\\n ORDER[1],\\n ANGLEUNIT[\\&quot;degree\\&quot;,0.0174532925199433]],\\n AXIS[\\&quot;geodetic longitude (Lon)\\&quot;,east,\\n ORDER[2],\\n ANGLEUNIT[\\&quot;degree\\&quot;,0.0174532925199433]],\\n ID[\\&quot;EPSG\\&quot;,4269]]&quot; 2.3.3 Defining a CRS Our data came with a CRS, but in the event that we needed to define it, we would do it like this: crs(dem)&lt;-&quot;epsg:4269&quot; 2.3.4 Tranforming / Reprojecting Raster Data So we know that our data is in the CRS with EPSG code 4269. Thats not the same CRS as our other data, so well need to transform it. Again, terra uses different names than sf does. Is this confusing? Yes it is. This is why we read the documentation. dem.3310&lt;-project(dem, &quot;epsg:3310&quot;) 2.3.5 Plotting the Data Now that all of our datasets are in the same projection, we can use them together. Lets make a map with both our raster and vector data. plot(dem.3310, col=terrain.colors(50), axes = FALSE, legend = FALSE) plot(ws.streams.3310$geometry, col=&quot;#3182bd&quot;, lwd=3, add=TRUE) plot(ws.polygons$geometry, lwd=1, border=&quot;grey35&quot;, add=TRUE) 2.4 Conclusion After completing this workshop, you should now have a better understanding of Coordinate Reference Systems (CRS) or projections, as they are often called colloquially. You can now find out what the CRS is for a dataset and know the common formats this can take. You should understand the difference between defining a CRS and tranforming a dataset (often called reprojecting in other GIS programs), when to use them, and how to execute both commands. Youve also seen how to use the basic plot() function to make a map. Now that youve had some hands-on experience with projections and spatial data, its a good time to go back an review the concepts introduced in the beginning of the workshop. You may find that some of it makes more sense now that you have more experience. Do you now feel like you know everything you need to know and will never have any more questions? Of course not! Its a learning process that will continue for the rest of your career working with spatial data. Need more help? See data.ucdavis.edu for how to contact your friendly UC Davis GIS Data Curator. 2.5 Resources Used to Compile this Tutorial: Geocomputation with R by Robin Lovelace Rspatial.org Data Carpentry Intro to Geospatial Data with R University of Colorados Map Projections International Institute for Geo-Information Science and Earth Observation (ITC) Carlos Furutis Projections Page ESRI Resource Center - Projections Map Projection Fun: xkcds Map Projections Jason Davies Map Projection Transitions Carlos Furutis Printable Projections Global projections you can print and assemble "]]
